// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }
// model Patient {
//   id      String   @id @default(uuid())
//   name    String?  
//   email   String   @unique
//   password String  @unique
//   image    String?  
//   doctor  Doctor ?  @relation(fields: [doctorId], references: [id])
//   doctorId String?
// }


// model Doctor {
//   id        String   @id @default(uuid())
//   name      String
//   email     String
//   password  String
//   patients  Patient[]
// }



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id           String        @id @default(uuid())
  name         String?  
  email        String        @unique
  password     String        @unique
  image        String?  
  doctor       Doctor?       @relation(fields: [doctorId], references: [id])
  doctorId     String?
  appointments Appointment[]
  payments     Payment[]
}

model Doctor {
  id           String        @id @default(uuid())
  name         String
  email        String
  password     String
  specialization String
  experience    Int
  rating        Float
  clients       Int
  expertise     String[]
  patients     Patient[]
  appointments Appointment[]
  availableSlots TimeSlot[]
}

model Appointment {
  id            String    @id @default(uuid())
  patient       Patient   @relation(fields: [patientId], references: [id])
  patientId     String
  doctor        Doctor    @relation(fields: [doctorId], references: [id])
  doctorId      String
  date          DateTime
  startTime     DateTime
  endTime       DateTime
  status        AppointmentStatus @default(PENDING)
  payment       Payment?
  meetingLink   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model TimeSlot {
  id        String   @id @default(uuid())
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  String
  date      DateTime
  startTime DateTime
  endTime   DateTime
  isBooked  Boolean  @default(false)
}

model Payment {
  id            String    @id @default(uuid())
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String    @unique
  patient       Patient   @relation(fields: [patientId], references: [id])
  patientId     String
  amount        Float
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  invoiceUrl    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  UPI
  CREDIT_CARD
  PHONE_PAY
  GPAY
  WALLET
}